<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFran.Seed.Core</name>
    </assembly>
    <members>
        <member name="T:SmartFran.Seed.Activator.Factory">
            <summary>
            Class to provide dynamic instance creation facilities
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Activator.Factory.DefaultBindingFlags">
            <summary>
            Default binding flags.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of type T using the default constructor.
            </summary>
            <param name="type">The type to create.</param>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TReturnType">The type to return.</typeparam>
            <returns>The new created instance.</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Instantiates T without calling a constructor.
            Works well with otherwise uninstantiable objects.
            </summary>
            <typeparam name="TReturnType">Anything that does NOT derive
            from ContextBoundObject.</typeparam>
            <param name="values">A dictionary of values to initialize
            the object in place of a constructor.</param>
            <param name="strict">If set to true (default value) an exception will be thrown if there are more
            parameters specified in values that the ones the class has or if the parameters are not assignables
            to the class fields or properties.</param>
            <returns>The newly created and instantiated object.</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Type,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Creates a new instance of type T using the default constructor
            </summary>
            <param name="type">
            The type to create.
            </param>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The binding flags to pass to Activator.CreateInstance
            </param>
            <typeparam name="TReturnType">
            The type to create
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``2(System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TCreatableType">The type to create</typeparam>
            <typeparam name="TReturnType">The type to return</typeparam>
            <returns>The new created instance</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``2(System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The Binding flags
            </param>
            <param name="binder">
            The Binder object
            </param>
            <param name="cultureInfo">
            A culture info
            </param>
            <typeparam name="TCreatableType">
            The type to create
            </typeparam>
            <typeparam name="TReturnType">
            The type to return
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TCreatableType">The type to create and return</typeparam>
            <returns>The new created instance</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The Binding flags
            </param>
            <param name="binder">
            The Binder object
            </param>
            <param name="cultureInfo">
            A culture info
            </param>
            <typeparam name="TCreatableType">
            The type to create and return
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.CreateBlank``1">
            <summary>
            The create blank.
            </summary>
            <typeparam name="T">
            Type of return.
            </typeparam>
            <returns>
            The T.
            </returns>
            <exception cref="T:System.ApplicationException">
            You can't use types that derive from ContextBoundObject.
            </exception>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Fill``1(``0,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            The fill.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="values">
            The values.
            </param>
            <param name="strict">
            The strict.
            </param>
            <typeparam name="T">
            Source type.
            </typeparam>
            <returns>
            The T.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Null arguments.
            </exception>
        </member>
        <member name="T:SmartFran.Seed.Adapter.AdaptMode">
            <summary>
            The adapt mode.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Project">
            <summary>
            The adapt mode project.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Flatten">
            <summary>
            The adapt mode flattening.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Unflatten">
            <summary>
            The adapt mode unflattening.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Adapter.ITypeAdapter">
            <summary>
            Base contract for map dto to aggregate or aggregate to dto.
            <remarks>
            This is a  contract for work with "auto" mappers ( automapper,emitmapper,valueinjecter...)
            or adhoc mappers
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapter.Adapt``1(System.Object,SmartFran.Seed.Adapter.AdaptMode)">
            <summary>
            Clone an object in other of any class type.
            </summary>
            <typeparam name="TTarget">
            The type.
            </typeparam>
            <param name="source">
            The source.
            </param>
            <param name="adaptMode">
            The adapt Mode.
            </param>
            <returns>
            The cloned object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapter.Adapt``1(System.Object,``0,SmartFran.Seed.Adapter.AdaptMode)">
            <summary>
            The adapt.
            </summary>
            <typeparam name="TTarget">
            The type.
            </typeparam>
            <param name="source">
            The source.
            </param>
            <param name="target">
            The target.
            </param>
            <param name="adaptMode">
            The adapt mode.
            </param>
            <returns>
            The target object.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Adapter.ITypeAdapterProvider">
            <summary>
            Base contract for adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapterProvider.Create">
            <summary>
            Create a type adater
            </summary>
            <returns>The created ITypeAdapter</returns>
        </member>
        <member name="T:SmartFran.Seed.Adapter.TypeAdapterFactory">
            <summary>
            Type adapter factory.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.TypeAdapterFactory.provider">
            <summary>
            Adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.TypeAdapterFactory.SetProvider(SmartFran.Seed.Adapter.ITypeAdapterProvider)">
            <summary>
            Set the current type adapter factory
            </summary>
            <param name="typeAdapterProvider">
            The type Adapter Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Adapter.TypeAdapterFactory.CreateTypeAdapter">
            <summary>
            Create a new type adapter from currect factory
            </summary>
            <returns>Created type adapter</returns>
        </member>
        <member name="T:SmartFran.Seed.CodeTable.CodeItem">
            <summary>
            The code name.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.CodeTable.CodeItem.description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.CodeTable.CodeItem.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.CodeTable.CodeItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.CodeTable.CodeItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.CodeTable.CodeItemAttribute`1">
            <summary>
            The code const attribute.
            </summary>
            <typeparam name="TValueType">
            Values type
            </typeparam>
        </member>
        <member name="F:SmartFran.Seed.CodeTable.CodeItemAttribute`1.values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.CodeTable.CodeItemAttribute`1.Values">
            <summary>
            Gets values.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.CodeTable.CodeTable">
            <summary>
            The code table.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.CodeTable.CodeTable.Values">
            <summary>
            The values.
            </summary>
            <returns>
            Return the values.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Captcha.ICaptcha">
            <summary>
            The EvalCaptcha interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Captcha.ICaptcha.IsValid(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The is valid.
            </summary>
            <param name="values">
            The values.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Captcha.ICaptchaProvider">
            <summary>
            The CaptchaProvider interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Captcha.ICaptchaProvider.Create">
            <summary>
            Create a type adater
            </summary>
            <returns>
            The created ILogger
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Captcha.CaptchaFactory">
            <summary>
            Log Factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Captcha.CaptchaFactory.provider">
            <summary>
            Logging factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Captcha.CaptchaFactory.SetProvider(SmartFran.Seed.Captcha.ICaptchaProvider)">
            <summary>
            Set the  log factory to use
            </summary>
            <param name="captchaProvider">
            The eval Captcha Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Captcha.CaptchaFactory.CreateCaptcha">
            <summary>
            The create captcha.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Captcha.ICaptcha"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Comm.MailSender">
            <summary>
            Servicio de envio de correos mediante smtp.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Comm.MailSender.defaultEmailTo">
            <summary>
            Direccion de correo de destinatario por defecto.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Comm.MailSender.defaultEmailFrom">
            <summary>
            correo del Remitente.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Comm.MailSender.smtp">
            <summary>
            Smtp service.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Comm.MailSender.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Comm.MailSender"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Comm.MailSender.SendHtmlEmail(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Net.Mail.LinkedResource},System.String)">
            <summary>
            Envia un correo.
            </summary>
            <param name="subject">
            El asunto.
            </param>
            <param name="htmlBody">
            Cuerpo html del correo.
            </param>
            <param name="to">
            El Destinatario.
            </param>
            <param name="from">from param.</param>
            <param name="cc">
            Destinatario secundario.
            </param>
            <param name="bcc">
            Destinatario oculto.
            </param>
            <param name="resources">
            Recursos linkeados.
            </param>
            <param name="plainBody">
            Cuerpo sin formato.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Comm.MailSender.SendPlainEmail(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Net.Mail.LinkedResource})">
            <summary>
            Envia un correo.
            </summary>
            <param name="subject">
            El asunto.
            </param>
            <param name="body">
            Cuerpo del correo.
            </param>
            <param name="to">
            El Destinatario.
            </param>
            <param name="from">from param.</param>
            <param name="cc">
            Destinatario secundario.
            </param>
            <param name="bcc">
            Destinatario oculto.
            </param>
            <param name="resources">
            Recursos linkeados.
            </param>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.CryptoJS">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.CryptoJS.Encode(System.String,System.String)">
            <summary>
            Encrypt CryptoJs.
            </summary>
            <param name="value">Text value.</param>
            <param name="pass">Pass value.</param>
            <returns>Encrypted value.</returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.CryptoJS.Decode(System.String,System.String)">
            <summary>
            Decrypt CryptoJs.
            </summary>
            <param name="value">Encrypt value.</param>
            <param name="pass">Pass value.</param>
            <returns>Text value.</returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.CryptoOptions">
            <summary>
            Crypto options.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Cryptography.CryptoOptions.NotIncludeHashInfo">
            <summary>
            Not include HashCRC in text.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.Hash00">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Cryptography.Hash00.Random">
            <summary>
            The random.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash00.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Cryptography.Hash00"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash00.GenerateEncoded(System.String)">
            <summary>
            The generate encoded.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash00.GenerateDecoded(System.String)">
            <summary>
            The generate decoded.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.Hash02">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash02.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Cryptography.Hash02"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash02.GenerateEncoded(System.String)">
            <summary>
            The generate encoded.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash02.GenerateDecoded(System.String)">
            <summary>
            The generate decoded.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.HashGenerator">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Cryptography.HashGenerator.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Cryptography.HashGenerator.FillChar">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetHashId(System.String)">
            <summary>
            The get hash id.
            </summary>
            <param name="hash">
            The hash.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetHashGenerator(System.Int32)">
            <summary>
            The get hash id.
            </summary>
            <param name="hashId">
            The hash Id.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetDefaultException">
            <summary>
            The get default exception.
            </summary>
            <returns>
            The <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetHash(System.String)">
            <summary>
            The get hash.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetHash(System.String,System.String)">
            <summary>
            The get merged user name and password.
            </summary>
            <param name="firstKey">
            The first Key.
            </param>
            <param name="secondKey">
            The second key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.Encode(System.String)">
            <summary>
            The encode.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.Encode(System.String,System.String)">
            <summary>
            The encode.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="phrase">
            The phrase.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.Decode(System.String)">
            <summary>
            The decode.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.Decode(System.String,System.String)">
            <summary>
            The decode.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <param name="phrase">
            The phrase.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.ComputeHash(System.String)">
            <summary>
            The compute hash.
            </summary>
            <param name="phrase">
            The phrase.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GetMergedKeys(System.String,System.String)">
            <summary>
            The get merged firstkey and secondkey.
            </summary>
            <param name="firstKey">
            The user password.
            </param>
            <param name="secondKey">
            The user name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GenerateEncoded(System.String)">
            <summary>
            The generate encoded.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.GenerateDecoded(System.String)">
            <summary>
            The generate decoded.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.HashGenerator.Generate(System.String,System.String)">
            <summary>
            The get crypto key.
            </summary>
            <param name="firstKey">
            The first Key.
            </param>
            <param name="secondKey">
            The second Key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.Crypto">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHash(System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The get hash.
            </summary>
            <param name="firstKey">
            The first Key.
            </param>
            <param name="hashId">
            The hash Id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHash(System.String,System.Int32)">
            <summary>
            The get hash.
            </summary>
            <param name="firstKey">
            The first Key.
            </param>
            <param name="hashId">
            The hash Id.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHash(System.String,System.String,System.Int32)">
            <summary>
            The get hash.
            </summary>
            <param name="firstKey">
            The first key.
            </param>
            <param name="secondKey">
            The second key.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHash(System.String,System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The get hash.
            </summary>
            <param name="firstKey">
            The first key.
            </param>
            <param name="secondKey">
            The second key.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHashId(System.String)">
            <summary>
            The get hash id.
            </summary>
            <param name="hash">
            The hash.
            </param>
            <returns>
            The id.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.Encode(System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The encode.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.Encode(System.String,System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The encode.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="phrase">
            The phrase.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.Decode(System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The decode.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.Decode(System.String,System.String,System.Int32,SmartFran.Seed.Cryptography.CryptoOptions[])">
            <summary>
            The decode.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <param name="phrase">
            The phrase.
            </param>
            <param name="hashId">
            The hash id.
            </param>
            <param name="options">
            Crypto options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHashGenerator(System.Int32)">
            <summary>
            The get hash generator.
            </summary>
            <param name="hashId">
            The hash id.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.Cryptography.HashGenerator"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHashWithCrc(System.Int32)">
            <summary>
            The get hash with crc.
            </summary>
            <param name="hashId">
            The hash id.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.Hash01">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Cryptography.Hash01.Random">
            <summary>
            The random.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash01.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Cryptography.Hash01"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash01.GenerateEncoded(System.String)">
            <summary>
            The generate encoded.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Hash01.GenerateDecoded(System.String)">
            <summary>
            The generate decoded.
            </summary>
            <param name="encoded">
            The encoded.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.IDiContainer">
            <summary>
            Base contract for dependency mapper
            <remarks>
            This is a  contract for work with dependency managers like Unity or adhoc mappers
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve``1">
            <summary>
            Resolve an instance of the default requested type from the container. 
            </summary>
            <typeparam name="TSearchedType">
            System.Type of object to get from the container.
            </typeparam>
            <returns>
            The retrieved object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve``1(System.String)">
            <summary>
            The resolve.
            </summary>
            <param name="configName">
            The config name.
            </param>
            <typeparam name="TSearchedType">
            System.Type of object to get from the container.
            </typeparam>
            <returns>
            The instance.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve(System.Type)">
            <summary>
            The resolve.
            </summary>
            <param name="typeService">
            The type service.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve(System.Type,System.String)">
            <summary>
            The resolve.
            </summary>
            <param name="typeService">
            The type service.
            </param>
            <param name="configName">
            The config name.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.ResolveAll(System.Type)">
            <summary>
            The resolve all.
            </summary>
            <param name="serviceType">
            The service type.
            </param>
            <returns>
            The resolved.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.ResolveAll``1">
            <summary>
            The resolve all.
            </summary>
            <typeparam name="T">
            type to search.
            </typeparam>
            <returns>
            The resolve.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.IsRegistered``1">
            <summary>
            The is registered.
            </summary>
            <typeparam name="TSearchedType">
            The type.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.IsRegistered``1(System.String)">
            <summary>
            The is registered.
            </summary>
            <param name="configName">
            The config name.
            </param>
            <typeparam name="TSearchedType">
            the type.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.IsRegistered(System.Type)">
            <summary>
            The is registered.
            </summary>
            <param name="typeService">
            The type service.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.IsRegistered(System.Type,System.String)">
            <summary>
            The is registered.
            </summary>
            <param name="typeService">
            The type service.
            </param>
            <param name="configName">
            The config name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.BeginScope">
            <summary>
            The begin scope.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Dependency.IDiContainer"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            The register instance.
            </summary>
            <param name="t">
            The t.
            </param>
            <param name="instance">
            The instance.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.Dependency.IDiContainer"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.RegisterInstance``1(``0)">
            <summary>
            The register instance.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <typeparam name="TInterface">
            Interface type.
            </typeparam>
            <returns>
            The <see cref="T:SmartFran.Seed.Dependency.IDiContainer"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.RegisterType(System.Type)">
            <summary>
            The register type.
            </summary>
            <param name="t">
            The t.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.Dependency.IDiContainer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.DiContainerFactory">
            <summary>
            Type dependency mapper factory.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.DiContainerFactory.Initialize(SmartFran.Seed.Dependency.IDiContainerProvider,System.String)">
            <summary>
            Set the current type dependency mapper factory
            </summary>
            <param name="containerProvider">
            The di Container Provider.
            </param>
            <param name="configureName">Configuration name.</param>
        </member>
        <member name="P:SmartFran.Seed.Dependency.DiContainerFactory.RootContainer">
            <summary>
            The create di container.
            </summary>
            <returns>
            The SmartFran.Seed.Dependency.IDiContainer.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.DiContainerFactory.Create(System.String)">
            <summary>
            Create container.
            </summary>
            <param name="configureName">Config name.</param>
            <returns></returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.IDiContainerProvider">
            <summary>
            The DiContainerProvider interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainerProvider.Create(System.String)">
            <summary>
            The create.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Dependency.IDiContainer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Helper.ExceptionHelper">
            <summary>
            The set property helper.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Helper.ExceptionHelper.AsText(System.Exception)">
            <summary>
            Convert to text an exception.
            </summary>
            <param name="ex">Exception.</param>
            <returns></returns>
        </member>
        <member name="T:SmartFran.Seed.Helper.MemberHelper">
            <summary>
            The set property helper.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Helper.MemberHelper.Name``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            The property name.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type.
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Helper.MemberHelper.Name``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            The name.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type.
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Helper.MemberHelper.Name``1(System.Linq.Expressions.LambdaExpression)">
            <summary>
            The name.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            Parameter type.
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Logging.ILogger">
            <summary>
            Common contract for trace instrumentation. You 
            can implement this contrat with several frameworks.
            .NET Diagnostics API, EntLib, Log4Net,NLog etc.
            <remarks>
            The use of this abstraction depends on the real needs you have and the specific features  
            you want to use of a particular existing implementation. 
             You could also eliminate this abstraction and directly use "any" implementation in your code, 
            LoggerFactory.Write(new LogEntry()) in EntLib, or LogManager.GetLog("logger-name") with log4net... etc.
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.GetName">
            <summary>
            The get name.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Info(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Log message information 
            </summary>
            <param name="message">
            The information message to write
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Warning(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Log warning message
            </summary>
            <param name="message">
            The warning message to write
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Error(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Log error message
            </summary>
            <param name="message">
            The error message to write
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Error(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The error.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Critical(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The critical.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Verbose(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The verbose.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.BeginProcess(System.String,System.Collections.Generic.IDictionary{System.String,System.String},SmartFran.Seed.Logging.LogProcess)">
            <summary>
            The begin.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.Logging.LogProcess"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.EndProcess(SmartFran.Seed.Logging.LogProcess,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The end.
            </summary>
            <param name="process">
            The process.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="T:SmartFran.Seed.Logging.ILoggerProvider">
            <summary>
            The LoggerProvider interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILoggerProvider.Create(System.String)">
            <summary>
            The create.
            </summary>
            <param name="loggerName">
            The logger name.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.Logging.ILogger"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Logging.LoggerFactory">
            <summary>
            Log Factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Logging.LoggerFactory.provider">
            <summary>
            Logging factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Logging.LoggerFactory.defaultLoggerName">
            <summary>
            Gets or sets the default logger name.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LoggerFactory.MainLogger">
            <summary>
            Gets MainLogger property.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.LoggerFactory.Initialize(SmartFran.Seed.Logging.ILoggerProvider,System.String)">
            <summary>
            Set the  log factory to use
            </summary>
            <param name="loggerProvider">
            The logger Provider.
            </param>
            <param name="configLogger">Config logger.</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.LoggerFactory.Create(System.String)">
            <summary>
            The create logger.
            </summary>
            <param name="loggerName">
            The logger Name.
            </param>
            <returns>
            The SmartFran.Seed.Logging.ILogger.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Logging.LogProcess">
            <summary>
            The log activity.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.LogProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Logging.LogProcess"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.LogProcess.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},SmartFran.Seed.Logging.LogProcess)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Logging.LogProcess"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="args">
            The args.
            </param>
            <param name="parent">
            The activity parent.
            </param>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.BeginOn">
            <summary>
            Gets the begin on.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.Name">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.Parent">
            <summary>
            Gets the activity id.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.EndOn">
            <summary>
            Gets or sets EndOn time.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.Args">
            <summary>
            Gets or sets the args.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Logging.LogProcess.Lap">
            <summary>
            Gets Lap time.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Resources.Activator.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Create_Values_is_null">
            <summary>
              Looks up a localized string similar to Values is null..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Fill_Source_is_null">
            <summary>
              Looks up a localized string similar to Source is null..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Fill_Values_is_null">
            <summary>
              Looks up a localized string similar to Values is null.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Resources.ExceptionHandling.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.DefaultAppExceptionMessage">
            <summary>
              Looks up a localized string similar to No detail application message..
            </summary>
        </member>
        <member name="T:SmartFran.Seed.ExceptionHandling.AppException">
            <summary>
            The base exception.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class. 
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="code">
            The code.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor(System.Guid,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class.
            </summary>
            <param name="issueId">
            The issue id.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="P:SmartFran.Seed.ExceptionHandling.AppException.IssueId">
            <summary>
            Gets or sets the issue id.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.ExceptionHandling.AppException.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.EnumSerializer">
            <summary>
            The enum serializer.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.EnumSerializer.Serialize(System.Enum[])">
            <summary>
            The enum array to string.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.EnumSerializer.Deserialize``1(System.String)">
            <summary>
            The string to enum array.
            </summary>
            <typeparam name="TEnumType">
            Enum type.
            </typeparam>
            <param name="stringData">
            The data string.
            </param>
            <returns>
            The enum array.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.ISerializer">
            <summary>
            The Serialize interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.SerializeObject(System.Object)">
            <summary>
            The serialize object.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject(System.String)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject``1(System.String)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <typeparam name="TType">
            Type object.
            </typeparam>
            <returns>
            The deserealized object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject(System.String,System.Type)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.ISerializerProvider">
            <summary>
            The SerializerProvider interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializerProvider.Create">
            <summary>
            The create.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Serialize.ISerializer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.SerializerFactory">
            <summary>
            The serializer factory.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Serialize.SerializerFactory.provider">
            <summary>
            The provider.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.SerializerFactory.SetProvider(SmartFran.Seed.Serialize.ISerializerProvider)">
            <summary>
            The set provider.
            </summary>
            <param name="serializerProvider">
            The serializer provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Serialize.SerializerFactory.CreateSerializer">
            <summary>
            The create serializer.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Serialize.ISerializer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.EntityValidatorFactory">
            <summary>
            Entity Validator Factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Validator.EntityValidatorFactory.provider">
            <summary>
            Factory of entity validator
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.EntityValidatorFactory.SetProvider(SmartFran.Seed.Validator.IEntityValidatorProvider)">
            <summary>
            Set the  log currentProvider to use
            </summary>
            <param name="entityValidatorProvider">
            The entity Validator Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Validator.EntityValidatorFactory.CreateEntityValidator">
            <summary>
            Createt a new entity validator
            </summary>
            <returns>Created ILog</returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.IEntityValidator">
            <summary>
            The entity validator base contract
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.IsValid(System.Object,System.Collections.Generic.List{SmartFran.Seed.Validator.InvalidItem})">
            <summary>
            Perform validation and return if the entity state is valid
            </summary>
            <param name="item">
            The instance to validate
            </param>
            <param name="report">
            The report.
            </param>
            <returns>
            True if entity state is valid
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.GetValidationReport(System.Object)">
            <summary>
            The get validation report.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The report.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.ReportFromDataException(System.Data.DataException)">
            <summary>
            The report from data exception.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <returns>
            The report.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.IEntityValidatorProvider">
            <summary>
            Base contract for entity validator abstract factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidatorProvider.Create">
            <summary>
            Create a new IEntityValidator
            </summary>
            <returns>New EntityValidator</returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.InvalidItem">
            <summary>
            Invalid item for report 
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Validator.InvalidItem"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Validator.InvalidItem"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
            <param name="objectRef">
            The object ref.
            </param>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.ObjectType">
            <summary>
            Gets or sets the item type.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.SetObjectReference(System.Object)">
            <summary>
            The set object reference.
            </summary>
            <param name="objectRef">
            The object ref.
            </param>
        </member>
    </members>
</doc>
