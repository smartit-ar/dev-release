<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFran.Seed.Core</name>
    </assembly>
    <members>
        <member name="T:SmartFran.Seed.Activator.Factory">
            <summary>
            Class to provide dynamic instance creation facilities
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Activator.Factory.DefaultBindingFlags">
            <summary>
            Default binding flags.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of type T using the default constructor.
            </summary>
            <param name="type">The type to create.</param>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TReturnType">The type to return.</typeparam>
            <returns>The new created instance.</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Instantiates T without calling a constructor.
            Works well with otherwise uninstantiable objects.
            </summary>
            <typeparam name="TReturnType">Anything that does NOT derive
            from ContextBoundObject.</typeparam>
            <param name="values">A dictionary of values to initialize
            the object in place of a constructor.</param>
            <param name="strict">If set to true (default value) an exception will be thrown if there are more
            parameters specified in values that the ones the class has or if the parameters are not assignables
            to the class fields or properties.</param>
            <returns>The newly created and instantiated object.</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Type,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Creates a new instance of type T using the default constructor
            </summary>
            <param name="type">
            The type to create.
            </param>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The binding flags to pass to Activator.CreateInstance
            </param>
            <typeparam name="TReturnType">
            The type to create
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``2(System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TCreatableType">The type to create</typeparam>
            <typeparam name="TReturnType">The type to return</typeparam>
            <returns>The new created instance</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``2(System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The Binding flags
            </param>
            <param name="binder">
            The Binder object
            </param>
            <param name="cultureInfo">
            A culture info
            </param>
            <typeparam name="TCreatableType">
            The type to create
            </typeparam>
            <typeparam name="TReturnType">
            The type to return
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="bindingFlags">The binding flags to pass to Activator.CreateInstance</param>
            <param name="binder">The binder object to pass to Activator.CreateInstance</param>
            <param name="cultureInfo">The CultureInfo to pass to Activator.CreateInstance</param>
            <typeparam name="TCreatableType">The type to create and return</typeparam>
            <returns>The new created instance</returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Create``1(System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of T using the default constructor
            </summary>
            <param name="args">
            The arguments to pass to the constructor
            </param>
            <param name="bindingFlags">
            The Binding flags
            </param>
            <param name="binder">
            The Binder object
            </param>
            <param name="cultureInfo">
            A culture info
            </param>
            <typeparam name="TCreatableType">
            The type to create and return
            </typeparam>
            <returns>
            The new created instance
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.CreateBlank``1">
            <summary>
            The create blank.
            </summary>
            <typeparam name="T">
            Type of return.
            </typeparam>
            <returns>
            The T.
            </returns>
            <exception cref="T:System.ApplicationException">
            You can't use types that derive from ContextBoundObject.
            </exception>
        </member>
        <member name="M:SmartFran.Seed.Activator.Factory.Fill``1(``0,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            The fill.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="values">
            The values.
            </param>
            <param name="strict">
            The strict.
            </param>
            <typeparam name="T">
            Source type.
            </typeparam>
            <returns>
            The T.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Null arguments.
            </exception>
        </member>
        <member name="T:SmartFran.Seed.Adapter.AdaptMode">
            <summary>
            The adapt mode.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Project">
            <summary>
            The adapt mode project.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Flatten">
            <summary>
            The adapt mode flattening.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.AdaptMode.Unflatten">
            <summary>
            The adapt mode unflattening.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Adapter.ITypeAdapter">
            <summary>
            Base contract for map dto to aggregate or aggregate to dto.
            <remarks>
            This is a  contract for work with "auto" mappers ( automapper,emitmapper,valueinjecter...)
            or adhoc mappers
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapter.Adapt``1(System.Object,SmartFran.Seed.Adapter.AdaptMode)">
            <summary>
            Clone an object in other of any class type.
            </summary>
            <typeparam name="TTarget">
            The type.
            </typeparam>
            <param name="source">
            The source.
            </param>
            <param name="adaptMode">
            The adapt Mode.
            </param>
            <returns>
            The cloned object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapter.Adapt``1(System.Object,``0,SmartFran.Seed.Adapter.AdaptMode)">
            <summary>
            The adapt.
            </summary>
            <typeparam name="TTarget">
            The type.
            </typeparam>
            <param name="source">
            The source.
            </param>
            <param name="target">
            The target.
            </param>
            <param name="adaptMode">
            The adapt mode.
            </param>
            <returns>
            The target object.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Adapter.ITypeAdapterProvider">
            <summary>
            Base contract for adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.ITypeAdapterProvider.Create">
            <summary>
            Create a type adater
            </summary>
            <returns>The created ITypeAdapter</returns>
        </member>
        <member name="T:SmartFran.Seed.Adapter.TypeAdapterFactory">
            <summary>
            Type adapter factory.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Adapter.TypeAdapterFactory.provider">
            <summary>
            Adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Adapter.TypeAdapterFactory.SetProvider(SmartFran.Seed.Adapter.ITypeAdapterProvider)">
            <summary>
            Set the current type adapter factory
            </summary>
            <param name="typeAdapterProvider">
            The type Adapter Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Adapter.TypeAdapterFactory.CreateTypeAdapter">
            <summary>
            Create a new type adapter from currect factory
            </summary>
            <returns>Created type adapter</returns>
        </member>
        <member name="T:SmartFran.Seed.Cryptography.Crypto">
            <summary>
            The cryptography.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Cryptography.Crypto.FillChar">
            <summary>
            The fill char.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetHash(System.String)">
            <summary>
            The get hash.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetCryptoKey(System.String,System.String)">
            <summary>
            The get crypto key.
            </summary>
            <param name="privateKey">
            The user Password.
            </param>
            <param name="publicKey">
            The user Name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Cryptography.Crypto.GetMergedKeys(System.String,System.String)">
            <summary>
            The get merged user name and password.
            </summary>
            <param name="privateKey">
            The user password.
            </param>
            <param name="publicKey">
            The user name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.IDiContainer">
            <summary>
            Base contract for dependency mapper
            <remarks>
            This is a  contract for work with dependency managers like Unity or adhoc mappers
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve``1">
            <summary>
            Resolve an instance of the default requested type from the container. 
            </summary>
            <typeparam name="TSearchedType">
            System.Type of object to get from the container.
            </typeparam>
            <returns>
            The retrieved object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Resolve``1(System.String)">
            <summary>
            The resolve.
            </summary>
            <param name="configName">
            The config name.
            </param>
            <typeparam name="TSearchedType">
            System.Type of object to get from the container.
            </typeparam>
            <returns>
            The <see cref="!:TSearchedType"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Release(System.Object)">
            <summary>
            The release.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainer.Register``1(``0)">
            <summary>
            The register.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <typeparam name="TSearchedType">
            The type.
            </typeparam>
            <returns>
            The <see cref="!:TSearchedType"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.DiContainerFactory">
            <summary>
            Type dependency mapper factory.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Dependency.DiContainerFactory.provider">
            <summary>
            Dependency mapper factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.DiContainerFactory.SetProvider(SmartFran.Seed.Dependency.IDiContainerProvider)">
            <summary>
            Set the current type dependency mapper factory
            </summary>
            <param name="diContainerProvider">
            The di Container Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Dependency.DiContainerFactory.CreateDiContainer">
            <summary>
            The create di container.
            </summary>
            <returns>
            The SmartFran.Seed.Dependency.IDiContainer.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Dependency.IDiContainerProvider">
            <summary>
            Base contract for adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Dependency.IDiContainerProvider.Create">
            <summary>
            Create a type adater
            </summary>
            <returns>The created ITypeAdapter</returns>
        </member>
        <member name="T:SmartFran.Seed.Logging.ILogger">
            <summary>
            Common contract for trace instrumentation. You 
            can implement this contrat with several frameworks.
            .NET Diagnostics API, EntLib, Log4Net,NLog etc.
            <remarks>
            The use of this abstraction depends on the real needs you have and the specific features  
            you want to use of a particular existing implementation. 
             You could also eliminate this abstraction and directly use "any" implementation in your code, 
            LoggerFactory.Write(new LogEntry()) in EntLib, or LogManager.GetLog("logger-name") with log4net... etc.
            </remarks>
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Log debug message
            </summary>
            <param name="message">The debug message</param>
            <param name="args">the message argument values</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Log debug message
            </summary>
            <param name="message">The message</param>
            <param name="exception">Exception to write in debug message</param>
            <param name="args">Args param</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Debug(System.Exception)">
            <summary>
            Log debug message
            </summary>
            <param name="exception">Exception to write in debug message</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Debug(System.Object)">
            <summary>
            Log debug message 
            </summary>
            <param name="item">The item with information to write in debug</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Log FATAL error
            </summary>
            <param name="message">The message of fatal error</param>
            <param name="args">The argument values of message</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            log FATAL error
            </summary>
            <param name="message">The message of fatal error</param>
            <param name="exception">The exception to write in this fatal message</param>
            <param name="args">Args param.</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.Fatal(System.Exception)">
            <summary>
            Log fatal message
            </summary>
            <param name="exception">Exception to write in debug message</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.LogInfo(System.String,System.Object[])">
            <summary>
            Log message information 
            </summary>
            <param name="message">The information message to write</param>
            <param name="args">The arguments values</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.LogWarning(System.String,System.Object[])">
            <summary>
            Log warning message
            </summary>
            <param name="message">The warning message to write</param>
            <param name="args">The argument values</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.LogError(System.String,System.Object[])">
            <summary>
            Log error message
            </summary>
            <param name="message">The error message to write</param>
            <param name="args">The arguments values</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.LogError(System.String,System.Exception,System.Object[])">
            <summary>
            Log error message
            </summary>
            <param name="message">The error message to write</param>
            <param name="exception">The exception associated with this error</param>
            <param name="args">The arguments values</param>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILogger.LogError(System.Exception)">
            <summary>
            Log error message
            </summary>
            <param name="exception">The exception associated with this error</param>
        </member>
        <member name="T:SmartFran.Seed.Logging.ILoggerProvider">
            <summary>
            Base contract for adapter factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILoggerProvider.Create">
            <summary>
            Create a type adater
            </summary>
            <returns>
            The created ILogger
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Logging.ILoggerProvider.Create(System.String)">
            <summary>
            Create a type adater
            </summary>
            <param name="loggerName">
            The logger Name.
            </param>
            <returns>
            The created ILogger
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Logging.LoggerFactory">
            <summary>
            Log Factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Logging.LoggerFactory.provider">
            <summary>
            Logging factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Logging.LoggerFactory.SetProvider(SmartFran.Seed.Logging.ILoggerProvider)">
            <summary>
            Set the  log factory to use
            </summary>
            <param name="loggerProvider">
            The logger Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Logging.LoggerFactory.CreateLogger">
            <summary>
            The create logger.
            </summary>
            <returns>
            The SmartFran.Seed.Logging.ILogger.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Logging.LoggerFactory.CreateLogger(System.String)">
            <summary>
            The create logger.
            </summary>
            <param name="loggerName">
            The logger Name.
            </param>
            <returns>
            The SmartFran.Seed.Logging.ILogger.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Helper.MemberHelper">
            <summary>
            The set property helper.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Helper.MemberHelper.Name``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            The property name.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type.
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Helper.MemberHelper.Name``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            The name.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type.
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Resources.Activator.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Create_Values_is_null">
            <summary>
              Looks up a localized string similar to Values is null..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Fill_Source_is_null">
            <summary>
              Looks up a localized string similar to Source is null..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.Activator.Messages.Fill_Values_is_null">
            <summary>
              Looks up a localized string similar to Values is null.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Resources.ExceptionHandling.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Resources.ExceptionHandling.Messages.DefaultAppExceptionMessage">
            <summary>
              Looks up a localized string similar to No detail application message..
            </summary>
        </member>
        <member name="T:SmartFran.Seed.ExceptionHandling.AppException">
            <summary>
            The base exception.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class. 
            </summary>
            <param name="issueId">
            The issue Id.
            </param>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.ExceptionHandling.AppException"/> class. 
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:SmartFran.Seed.ExceptionHandling.AppException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
        </member>
        <member name="P:SmartFran.Seed.ExceptionHandling.AppException.IssueId">
            <summary>
            Gets or sets the issue id.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.Serialize.ISerializer">
            <summary>
            The Serialize interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.SerializeObject(System.Object)">
            <summary>
            The serialize object.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject(System.String)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject``1(System.String)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <typeparam name="TType">
            Type object.
            </typeparam>
            <returns>
            The deserealized object.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializer.DeserializeObject(System.String,System.Type)">
            <summary>
            The deserialize object.
            </summary>
            <param name="serObj">
            The ser obj.
            </param>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.ISerializerProvider">
            <summary>
            The SerializerProvider interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.ISerializerProvider.Create">
            <summary>
            The create.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Serialize.ISerializer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Serialize.SerializerFactory">
            <summary>
            The serializer factory.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Serialize.SerializerFactory.provider">
            <summary>
            The provider.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Serialize.SerializerFactory.SetProvider(SmartFran.Seed.Serialize.ISerializerProvider)">
            <summary>
            The set provider.
            </summary>
            <param name="serializerProvider">
            The serializer provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Serialize.SerializerFactory.CreateSerializer">
            <summary>
            The create serializer.
            </summary>
            <returns>
            The <see cref="T:SmartFran.Seed.Serialize.ISerializer"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.EntityValidatorFactory">
            <summary>
            Entity Validator Factory
            </summary>
        </member>
        <member name="F:SmartFran.Seed.Validator.EntityValidatorFactory.provider">
            <summary>
            Factory of entity validator
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.EntityValidatorFactory.SetProvider(SmartFran.Seed.Validator.IEntityValidatorProvider)">
            <summary>
            Set the  log currentProvider to use
            </summary>
            <param name="entityValidatorProvider">
            The entity Validator Provider.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Validator.EntityValidatorFactory.CreateEntityValidator">
            <summary>
            Createt a new entity validator
            </summary>
            <returns>Created ILog</returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.IEntityValidator">
            <summary>
            The entity validator base contract
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.IsValid(System.Object,System.Collections.Generic.List{SmartFran.Seed.Validator.InvalidItem})">
            <summary>
            Perform validation and return if the entity state is valid
            </summary>
            <param name="item">
            The instance to validate
            </param>
            <param name="report">
            The report.
            </param>
            <returns>
            True if entity state is valid
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.GetValidationReport(System.Object)">
            <summary>
            The get validation report.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The report.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidator.ReportFromDataException(System.Data.DataException)">
            <summary>
            The report from data exception.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <returns>
            The report.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.IEntityValidatorProvider">
            <summary>
            Base contract for entity validator abstract factory
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.IEntityValidatorProvider.Create">
            <summary>
            Create a new IEntityValidator
            </summary>
            <returns>New EntityValidator</returns>
        </member>
        <member name="T:SmartFran.Seed.Validator.InvalidItem">
            <summary>
            Invalid item for report 
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Validator.InvalidItem"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.Validator.InvalidItem"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
            <param name="objectRef">
            The object ref.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.SetObjectReference(System.Object)">
            <summary>
            The set object reference.
            </summary>
            <param name="objectRef">
            The object ref.
            </param>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.DeserializeObjectReference``1">
            <summary>
            The deserialize object reference.
            </summary>
            <typeparam name="TType">
            Type to return.
            </typeparam>
            <returns>
            The desearized object reference.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.DeserializeObjectReference(System.Type)">
            <summary>
            The deserialize object reference.
            </summary>
            <param name="typeRef">
            The type ref.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.Validator.InvalidItem.DeserializeObjectReference">
            <summary>
            The deserialize object reference.
            </summary>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.ObjectType">
            <summary>
            Gets or sets the item type.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.ObjectReference">
            <summary>
            Gets or sets the object reference.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.Validator.InvalidItem.ObjectSerializer">
            <summary>
            Gets or sets the object serializer.
            </summary>
        </member>
    </members>
</doc>
