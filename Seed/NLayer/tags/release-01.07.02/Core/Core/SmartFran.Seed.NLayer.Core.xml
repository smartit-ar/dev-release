<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFran.Seed.NLayer.Core</name>
    </assembly>
    <members>
        <member name="T:SmartFran.Seed.NLayer.Application.ApplicationClientBase`1">
            <summary>
            The custom client base.
            </summary>
            <typeparam name="TChannel">
            Channel type.
            </typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Application.ApplicationClientBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.Application.ApplicationClientBase`1"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Application.ApplicationClientBase`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.Application.ApplicationClientBase`1"/> class.
            </summary>
            <param name="endpoint">
            The endpoint.
            </param>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Application.EntityDtoCustomKey`1">
            <summary>
            Base class for entities.
            </summary>
            <typeparam name="T">
            Candidate key type.
            </typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Application.EntityDtoCustomKey`1.CustomKey">
            <summary>
            The candidate key.
            </summary>
            <returns>
            The key type T.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Application.EntityDtoBase">
            <summary>
            Base class for entities.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Application.EntityDto`1">
            <summary>
            Base class for entities.
            </summary>
            <typeparam name="T">
            Type of identity.
            </typeparam>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Application.EntityDto`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.ISqlPassThrough">
            <summary>
            The result 001.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISqlPassThrough.Sql(System.Object[])">
            <summary>
            Gets the sql.
            </summary>
            <param name="sqlArgs">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISqlPassThrough.Execute``1(SmartFran.Seed.NLayer.Data.IDataContext,System.Object[])">
            <summary>
            The execute.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="parameters">
            The parameters.
            </param>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.IDataInitializer">
            <summary>
            The DataInitializer interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataInitializer.Configure">
            <summary>
            The configure.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.ISql">
            <summary>
            Base contract for support 'dialect specific queries'.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            Execute specific query with underliying persistence store.
            </summary>
            <typeparam name="TEntity">Entity type to map query results.</typeparam>
            <param name="sqlQuery">
            Dialect Query.
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer > {0}
            </example>
            </param>
            <param name="parameters">A vector of parameters values.</param>
            <returns>
            Enumerable results.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteQuery``1(SmartFran.Seed.NLayer.Data.ISqlPassThrough,System.Object[])">
            <summary>
            The execute query.
            </summary>
            <param name="sqlPassThrough">
            The sql pass through.
            </param>
            <param name="parameters">
            The parameters.
            </param>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteQuery``2(System.Object[])">
            <summary>
            The execute query.
            </summary>
            <param name="parameters">
            The parameters.
            </param>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <typeparam name="TSqlPassThrough">
            Sql pass through.
            </typeparam>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Execute arbitrary command into underliying persistence store.
            </summary>
            <param name="sqlCommand">
            Command to execute.
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer > {0}
            </example>
            </param>
            <param name="parameters">A vector of parameters values.</param>
            <returns>The number of affected records.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteCommand(SmartFran.Seed.NLayer.Data.ISqlPassThrough,System.Object[])">
            <summary>
            The execute command.
            </summary>
            <param name="sqlPassThrough">
            The sql pass through.
            </param>
            <param name="parameters">
            The parameters.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.ISql.ExecuteCommand``1(System.Object[])">
            <summary>
            The execute command.
            </summary>
            <param name="parameters">
            The parameters.
            </param>
            <typeparam name="TSqlPassThrough">
            SQl pass through.
            </typeparam>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.FilterInfo">
            <summary>
            The filter info.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Data.FilterInfo.Spec">
            <summary>
            Gets or sets the spec.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Data.FilterInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.OrderDirection">
            <summary>
            The order direction.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Data.OrderDirection.Asc">
            <summary>
            The asc.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Data.OrderDirection.Desc">
            <summary>
            The desc.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.SortInfo">
            <summary>
            The sort info.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Data.SortInfo.Field">
            <summary>
            Gets or sets the field.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Data.SortInfo.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.IDataContext">
            <summary>
            The DataContext interface.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataContext.ApplyChanges(System.Boolean)">
            <summary>
            ApplyChanges all changes made in a container.
            </summary>
            <param name="rollbackIfFail">
            The rollback If Fail.
            </param>
            <remarks>
            If the entity have fixed properties and any optimistic concurrency problem exists,
            then an exception is thrown.
            </remarks>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataContext.RevertChanges">
            <summary>
            RevertChanges tracked changes. See references of context pattern.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataContext.GetView``2">
            <summary>
            The get view.
            </summary>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <typeparam name="TKey">
            Key type.
            </typeparam>
            <returns>
            The DataView.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataContext.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add massive list of entities.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <param name="list">Listo to added.</param>
            <returns>Added list.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.IDataContext.RemoveRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove massive list of entities.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <param name="list">List to remove.</param>
            <returns>List removed.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.Ordering.OrderByGenerator">
            <summary>
            The order by generator.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.OrderByGenerator.Apply``1(System.Linq.IQueryable{``0},SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{``0}[])">
            <summary>
            The apply.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="orderByExpressions">
            The order by expressions.
            </param>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression`1">
            <summary>
            The OrderByExpression interface.
            </summary>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression`1.ApplyOrderBy(System.Linq.IQueryable{`0})">
            <summary>
            The apply order by.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Linq.IOrderedQueryable"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression`1.ApplyThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>
            The apply then by.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Linq.IOrderedQueryable"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2">
            <summary>
            The order by expression.
            </summary>
            <typeparam name="TEntity">
            Entity type.
            </typeparam>
            <typeparam name="TOrderBy">
            Order by type.
            </typeparam>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2.expression">
            <summary>
            The _expression.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2.direction">
            <summary>
            The _descending.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},SmartFran.Seed.NLayer.Data.OrderDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="direction">
            The direction.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2.ApplyOrderBy(System.Linq.IQueryable{`0})">
            <summary>
            The apply order by.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Linq.IOrderedQueryable"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Data.Ordering.OrderByExpression`2.ApplyThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>
            The apply then by.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Linq.IOrderedQueryable"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.ParameterRebinder">
            <summary>
            Helper for rebinder parameters without use Invoke method in expressions
            (this methods is not supported in all linq query providers,
            for example in Linq2Entities is not supported).
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.ParameterRebinder"/>.
            </summary>
            <param name="map">Map specification.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replate parameters in expression with a Map information.
            </summary>
            <param name="map">Map information.</param>
            <param name="exp">Expression to replace parameters.</param>
            <returns>Expression with parameters replaced.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit pattern method.
            </summary>
            <param name="p">A Parameter expression.</param>
            <returns>New visited expression.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.AndSpecification`1">
            <summary>
            A logic AND Specification.
            </summary>
            <typeparam name="T">Type of entity that check this specification.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.AndSpecification`1.#ctor(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0},SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification.
            </summary>
            <param name="leftSide">Left side specification.</param>
            <param name="rightSide">Right side specification.</param>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.AndSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.AndSpecification`1.RightSideSpecification">
            <summary>
            Right side specification.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.AndSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1"/>.
            </summary>
            <returns><see cref="T:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1"/>.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.CompositeSpecification`1">
            <summary>
            Base class for composite specifications.
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification.</typeparam>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.CompositeSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification for this composite element.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.CompositeSpecification`1.RightSideSpecification">
            <summary>
            Right side specification for this composite element.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.DirectSpecification`1">
            <summary>
            A Direct Specification is a simple implementation
            of specification that acquire this from a lambda expression
            in  constructor.
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification.</typeparam>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Domain.Specification.DirectSpecification`1.matchingCriteria">
            <summary>
            The matching criteria.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.DirectSpecification`1"/> class. 
            Default constructor for Direct Specification.
            </summary>
            <param name="matchingCriteria">
            A Matching Criteria.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.DirectSpecification`1.SatisfiedBy">
            <summary>
            The satisfied by.
            </summary>
            <returns>
            The System.Linq.Expressions.Expression`1[TDelegate -&gt; System.Func`2[T -&gt; TEntity, TResult -&gt; System.Boolean]].
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.ExpressionBuilder">
            <summary>
            Extension methods for adding AND and OR with parameters rebinder.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Compose two expressions and merge all in a new expression.
            </summary>
            <typeparam name="T">Type of params in expression.</typeparam>
            <param name="first">Expression instance.</param>
            <param name="second">Expression to merge.</param>
            <param name="merge">Function to merge.</param>
            <returns>New merged expression.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And operator.
            </summary>
            <typeparam name="T">Type of params in expression.</typeparam>
            <param name="first">Right Expression in AND operation.</param>
            <param name="second">Left Expression in And operation.</param>
            <returns>New AND expression.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or operator.
            </summary>
            <typeparam name="T">Type of param in expression.</typeparam>
            <param name="first">Right expression in OR operation.</param>
            <param name="second">Left expression in OR operation.</param>
            <returns>New Or expressions.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1">
            <summary>
            Base contract for Specification pattern, for more information
            about this pattern see http://martinfowler.com/apsupp/spec.pdf
            or http://en.wikipedia.org/wiki/Specification_pattern.
            This is really a variant implementation where we have added Linq and
            lambda expression into this pattern.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1.SatisfiedBy">
            <summary>
            Check if this specification is satisfied by a 
            specific expression lambda.
            </summary>
            <returns>Where expression.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1">
            <summary>
            NotEspecification convert a original
            specification with NOT logic operator.
            </summary>
            <typeparam name="TEntity">Type of element for this specificaiton.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1.#ctor(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1"/>.
            </summary>
            <param name="originalSpecification">Original specification.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1"/>.
            </summary>
            <param name="originalSpecification">Original specificaiton.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.NotSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1"/>.
            </summary>
            <returns>Result value.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1">
            <summary>
            A Logic OR Specification.
            </summary>
            <typeparam name="T">Type of entity that check this specification.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1.#ctor(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0},SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1"/>.
            </summary>
            <param name="leftSide">Left side specification.</param>
            <param name="rightSide">Right side specification.</param>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1.LeftSideSpecification">
            <summary>
            Obtiene left side specification.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1.RightSideSpecification">
            <summary>
            Obtiene righ side specification.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.OrSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.ISpecification`1"/>.
            </summary>
            <returns>Result value.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.Specification`1">
            <summary>
            Represent a Expression Specification.
            <remarks>
            Specification overload operators for create AND,OR or NOT specifications.
            Additionally overload AND and OR operators with the same sense of ( binary And and binary Or ).
            C# couldn’t overload the AND and OR operators directly since the framework doesn’t allow such craziness. But
            with overloading false and true operators this is posible. For explain this behavior please read
            http://msdn.microsoft.com/en-us/library/aa691312(VS.71).aspx
            </remarks>
            </summary>
            <typeparam name="TEntity">Type of item in the criteria.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.op_BitwiseAnd(SmartFran.Seed.NLayer.Domain.Specification.Specification{`0},SmartFran.Seed.NLayer.Domain.Specification.Specification{`0})">
            <summary>
             And operator.
            </summary>
            <param name="leftSideSpecification">left operand in this AND operation.</param>
            <param name="rightSideSpecification">right operand in this AND operation.</param>
            <returns>New specification.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.op_BitwiseOr(SmartFran.Seed.NLayer.Domain.Specification.Specification{`0},SmartFran.Seed.NLayer.Domain.Specification.Specification{`0})">
            <summary>
            Or operator.
            </summary>
            <param name="leftSideSpecification">left operand in this OR operation.</param>
            <param name="rightSideSpecification">right operand in this OR operation.</param>
            <returns>New specification. </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.op_LogicalNot(SmartFran.Seed.NLayer.Domain.Specification.Specification{`0})">
            <summary>
            Not specification.
            </summary>
            <param name="specification">Specification to negate.</param>
            <returns>New specification.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.op_False(SmartFran.Seed.NLayer.Domain.Specification.Specification{`0})">
            <summary>
            Override operator false, only for support AND OR operators.
            </summary>
            <param name="specification">Specification instance.</param>
            <returns>See False operator in C#.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.op_True(SmartFran.Seed.NLayer.Domain.Specification.Specification{`0})">
            <summary>
            Override operator True, only for support AND OR operators.
            </summary>
            <param name="specification">Specification instance.</param>
            <returns>See True operator in C#.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.Specification`1.SatisfiedBy">
            <summary>
            IsSatisFied Specification pattern method,.
            </summary>
            <returns>Expression that satisfy this specification.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Specification.TrueSpecification`1">
            <summary>
            True specification.
            </summary>
            <typeparam name="TEntity">Type of entity in this specification.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Specification.TrueSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:SmartFran.Seed.NLayer.Domain.Specification.Specification`1"/>.
            </summary>
            <returns><see cref="T:SmartFran.Seed.NLayer.Domain.Specification.Specification`1"/>.</returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.EntityBase">
            <summary>
            Base class for entities.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.EntityBase.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.op_Equality(SmartFran.Seed.NLayer.Domain.EntityBase,SmartFran.Seed.NLayer.Domain.EntityBase)">
            <summary>
            The ==.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            Equality of entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.op_Inequality(SmartFran.Seed.NLayer.Domain.EntityBase,SmartFran.Seed.NLayer.Domain.EntityBase)">
            <summary>
            The !=.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            Non equality comparation.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.GenerateNewIdentity">
            <summary>
            Generate identity for this entity.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The Hash.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.Equals(SmartFran.Seed.NLayer.Domain.EntityBase)">
            <summary>
            The equals.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityBase.GetKey">
            <summary>
            The key.
            </summary>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.EntityGuid">
            <summary>
            Base class for entities.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityGuid.GenerateNewIdentity">
            <summary>
            Generate identity for this entity.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityGuid.ChangeCurrentIdentity(System.Guid)">
            <summary>
            Change current identity for a new non transient identity.
            </summary>
            <param name="identity">the new identity.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.EntityGuid.NewSequentialGuid">
            <summary>
            This algorithm generates secuential GUIDs across system boundaries, ideal for databases. 
            </summary>
            <returns>
            Guid id.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.EntityAutoInc">
            <summary>
            Base class for entities.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.Entity`1">
            <summary>
            Base class for entities.
            </summary>
            <typeparam name="T">
            Type of identity.
            </typeparam>
        </member>
        <member name="F:SmartFran.Seed.NLayer.Domain.Entity`1.requestedHashCode">
            <summary>
            The requested hash code.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Domain.Entity`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Entity`1.IsValidId(System.Object)">
            <summary>
            The is valid identify.
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            Is valid.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Entity`1.IsIdentified">
            <summary>
            Check if this entity is without identity at this moment.
            </summary>
            <returns>True if entity is transient, else false.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Entity`1.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The System.Int32.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Entity`1.Equals(SmartFran.Seed.NLayer.Domain.Entity{`0})">
            <summary>
            The equals.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.Entity`1.GetKey">
            <summary>
            The key.
            </summary>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.IDataView`2">
            <summary>
            The DataView interface.
            </summary>
            <typeparam name="TEntity">
            Type of entity for this repository. 
            </typeparam>
            <typeparam name="T">
            Type of entity identify.
            </typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Add(`0)">
            <summary>
            Add item into repository.
            </summary>
            <param name="item">Item to add to repository.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Exists(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The count.
            </summary>
            <param name="specification">
            The specification.
            </param>
            <returns>
            The if exists.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            The count.
            </summary>
            <param name="selector">
            The where Expression.
            </param>
            <returns>
            The if exists.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Remove(`0)">
            <summary>
            Delete item. 
            </summary>
            <param name="item">Item to delete.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Remove(`1)">
            <summary>
            Delete item. 
            </summary>
            <param name="itemId">
            The item Id.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Reload(`0@,System.Boolean)">
            <summary>
            The reload.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="full">
            Full reload.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Modify(`0)">
            <summary>
            Set item as modified.
            </summary>
            <param name="item">Item to modify.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.TrackEntity(`0)">
            <summary>
            Track entity into this repository, really in context. 
            In EF this can be done with Attach and with Update in NH.
            </summary>
            <param name="item">Item to attach.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.NoTrackEntity(`0)">
            <summary>
            No track item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Merge(`0,`0)">
            <summary>
            Sets modified entity into the repository. 
            When calling ApplyChanges() method in context 
            these changes will be saved into the storage.
            </summary>
            <param name="persisted">The persisted item.</param>
            <param name="current">The current item.</param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Get(`1)">
            <summary>
            Get element by entity key.
            </summary>
            <param name="id">Entity key value.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            The get.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The entity.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.GetFirst(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The get.
            </summary>
            <param name="specification">
            The specification.
            </param>
            <returns>
            The entity.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.GetAll">
            <summary>
            Get all elements of type TEntity in repository.
            </summary>
            <returns>List of selected elements.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Count">
            <summary>
            The count.
            </summary>
            <returns>
            The System.Int32.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Count(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The count.
            </summary>
            <param name="specification">
            The specification.
            </param>
            <returns>
            The System.Int32.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            The count.
            </summary>
            <param name="selector">
            The where Expression.
            </param>
            <returns>
            The System.Int32.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            The sum.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            The sum.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            The sum.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            The sum.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            The sum.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            The min.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <typeparam name="TResult">
            Result type.
            </typeparam>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            The max.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <typeparam name="TResult">
            Result type.
            </typeparam>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            The average.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            The average.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            The average.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            The average.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            The average.
            </summary>
            <param name="selector">
            The selector.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The all matching.
            </summary>
            <param name="specification">
            The specification.
            </param>
            <returns>
            The System.Collections.Generic.IEnumerable`1[T -&gt; TEntity].
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[])">
            <summary>
            The query.
            </summary>
            <param name="orderBy">
            The order By.
            </param>
            <returns>
            IEnumerable of entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[],SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The query.
            </summary>
            <param name="orderBy">
            The order By.
            </param>
            <param name="specification">
            The specification.
            </param>
            <returns>
            IEnumerable of entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[],System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            The query.
            </summary>
            <param name="orderBy">
            The order By.
            </param>
            <param name="selector">
            The where expression.
            </param>
            <returns>
            IEnumerable of entities.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get  elements of type TEntity in repository.
            </summary>
            <param name="selector">Filter that each element do match.</param>
            <returns>List of selected elements.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(System.Int32,System.Int32,SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[])">
            <summary>
            The query.
            </summary>
            <param name="pageIndex">
            The page index.
            </param>
            <param name="pageSize">
            The page Size.
            </param>
            <param name="orderBy">
            The order By.
            </param>
            <returns>
            The System.Collections.Generic.IEnumerable`1[T -&gt; TEntity].
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(System.Int32,System.Int32,SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[],System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            The query.
            </summary>
            <param name="pageIndex">
            The page index.
            </param>
            <param name="pageSize">
            The page Size.
            </param>
            <param name="orderBy">
            The order By.
            </param>
            <param name="selector">
            The where expression.
            </param>
            <returns>
            The System.Collections.Generic.IEnumerable`1[T -&gt; TEntity].
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.IDataView`2.Query(System.Int32,System.Int32,SmartFran.Seed.NLayer.Data.Ordering.IOrderByExpression{`0}[],SmartFran.Seed.NLayer.Domain.Specification.ISpecification{`0})">
            <summary>
            The query.
            </summary>
            <param name="pageIndex">
            The page index.
            </param>
            <param name="pageSize">
            The page Size.
            </param>
            <param name="orderBy">
            The order By.
            </param>
            <param name="whereExpression">
            The where specification expression.
            </param>
            <returns>
            The System.Collections.Generic.IEnumerable`1[T -&gt; TEntity].
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Domain.ValueObject`1">
            <summary>
            Base class for value objects in domain.
            Value.
            </summary>
            <typeparam name="TValueObject">The type of this value object.</typeparam>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.ValueObject`1.op_Equality(SmartFran.Seed.NLayer.Domain.ValueObject{`0},SmartFran.Seed.NLayer.Domain.ValueObject{`0})">
            <summary>
            The equality operator.
            </summary>
            <param name="left">Left part.</param>
            <param name="right">Right part.</param>
            <returns>True if the values of its operands are equal.</returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.ValueObject`1.op_Inequality(SmartFran.Seed.NLayer.Domain.ValueObject{`0},SmartFran.Seed.NLayer.Domain.ValueObject{`0})">
            <summary>
            The !=.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            True if the values of its operands aren't equal.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.ValueObject`1.Equals(`0)">
            <summary>
            The equals.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.ValueObject`1.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.Domain.ValueObject`1.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The System.Int32.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException">
            <summary>
            The business rules exception.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.#ctor(System.Collections.Generic.ICollection{SmartFran.Seed.Validator.InvalidItem},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException"/> class.
            </summary>
            <param name="report">
            The report.
            </param>
            <param name="innerException">
            The inner Exception.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.#ctor(System.Data.DataException)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException"/> class.
            </summary>
            <param name="dataException">
            The data exception.
            </param>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.Report">
            <summary>
            Gets or sets the report.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesException.FromFaultDetail(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail)">
            <summary>
            The from fault detail.
            </summary>
            <param name="faultDetail">
            The fault detail.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesFaultDetail">
            <summary>
            The business rules exception.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesFaultDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesFaultDetail"/> class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesFaultDetail.Report">
            <summary>
            Gets or sets the report.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.BusinessRulesFaultDetail.FromException(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException)">
            <summary>
            The from exception.
            </summary>
            <param name="exception">
            The exception.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail"/>.
            </returns>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.Helper.NestedExceptionInfoGenerator">
            <summary>
            The nested exception info generator.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.Helper.NestedExceptionInfoGenerator.Do(System.Exception,SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail@)">
            <summary>
            The get nested exception info.
            </summary>
            <param name="innerException">
            The inner exception.
            </param>
            <param name="nestedExceptioninfo">
            The nested exceptioninfo.
            </param>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.OperativityException">
            <summary>
            Exception raised when a severe error is detected by a business logic, that prevent them to execute normally. 
            This kind of exceptions shows a problem preventing the application of the business logic, if the problem persist after retries then there is requiered the intervention of system administrators.
            </summary>
            <remarks>
            Such an error can be a database related connection error, or an metadata inconsistency, timeouts at the business-store layers, etc.
            </remarks>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.OperativityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.OperativityException"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.OperativityException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.OperativityException"/> class.
            </summary>
            <param name="message">
            The exception message.
            </param>
            <param name="code">
            The code.
            </param>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.OperativityFaultDetail">
            <summary>
            Exception raised when a severe error is detected by a business logic, that prevent them to execute normally. 
            This kind of exceptions shows a problem preventing the application of the business logic, if the problem persist after retries then there is requiered the intervention of system administrators.
            </summary>
            <remarks>
            Such an error can be a database related connection error, or an metadata inconsistency, timeouts at the business-store layers, etc.
            </remarks>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.OperativityFaultDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.OperativityFaultDetail"/> class.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException">
            <summary>
            The distributed service exception.
            </summary>
        </member>
        <member name="F:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.nestedExceptionInfo">
            <summary>
            The nested exception info.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
            <param name="innerException">
            The inner Exception.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.#ctor(System.Guid,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/> class.
            </summary>
            <param name="issueId">
            The issue id.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="code">
            The code.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.#ctor(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/> class. 
            </summary>
            <param name="faultDetail">
            The detail Fault.
            </param>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.NestedExceptionInfo">
            <summary>
            Gets or sets the nested exception.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.FromFaultDetail(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail)">
            <summary>
            The from fault detail.
            </summary>
            <param name="faultDetail">
            The fault detail.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.CreateFaultException``1">
            <summary>
            The create fault detail.
            </summary>
            <typeparam name="TFaultDetail">
            Fault detail type.
            </typeparam>
            <returns>
            The fault detail.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException.InitializeFields(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail)">
            <summary>
            The initialize fields.
            </summary>
            <param name="faultDetail">
            The fault detail.
            </param>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail">
            <summary>
            The fault detail.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail"/> class.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.#ctor(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail"/> class.
            </summary>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.IssueId">
            <summary>
            Gets or sets the issue id.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.NestedExceptionInfo">
            <summary>
            Gets or sets the inner exception.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.FromException(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException)">
            <summary>
            The from fault detail.
            </summary>
            <param name="exception">
            The exception.
            </param>
            <returns>
            The <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail"/>.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.CreateException``1">
            <summary>
            The create exception.
            </summary>
            <typeparam name="TException">
            Exception type.
            </typeparam>
            <returns>
            The Exception.
            </returns>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceFaultDetail.InitializeFields(SmartFran.Seed.NLayer.ExceptionHandling.DistributedServiceException)">
            <summary>
            The initialize fields.
            </summary>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="T:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail">
            <summary>
            The inner exception detail.
            </summary>
        </member>
        <member name="M:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail"/> class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail.ExceptionClassType">
            <summary>
            Gets or sets the exception class type.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.ExceptionHandling.InnerExceptionDetail.NestedExceptionInfo">
            <summary>
            Gets or sets the inner exception information.
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Resources.Application.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.Application.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.Application.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.Application.Messages.exception_AdapterModeNotApplicable">
            <summary>
              Looks up a localized string similar to AdapterMode: {0}, Not applicable..
            </summary>
        </member>
        <member name="T:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages.BusinessRulesExceptionMessage">
            <summary>
              Looks up a localized string similar to Business rules exception. See report for detail..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages.DefaulDistributedServiceException">
            <summary>
              Looks up a localized string similar to No detail distributed service exception message..
            </summary>
        </member>
        <member name="P:SmartFran.Seed.NLayer.Resources.ExceptionHandling.Messages.OperativityException">
            <summary>
              Looks up a localized string similar to Operativity exception. Severe error is detected by a business logic, that prevent them to execute normally..
            </summary>
        </member>
    </members>
</doc>
